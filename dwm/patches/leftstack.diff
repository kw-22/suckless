From 582bc25ccff1b8f38378aee3fd7fac38feef967a Mon Sep 17 00:00:00 2001
From: Kevin <kw22@princeton.edu>
Date: Tue, 12 Jan 2021 15:22:39 -0500
Subject: [PATCH] patch for setting master to right side

---
 dwm/config.h | 2 +-
 dwm/dwm.1    | 4 ++--
 dwm/dwm.c    | 4 ++--
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/dwm/config.h b/dwm/config.h
index d69d245..ccd2440 100644
--- a/dwm/config.h
+++ b/dwm/config.h
@@ -38,7 +38,7 @@ static const int resizehints = 1;    /* 1 means respect size hints in tiled resi
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
+	{ "=[]",      tile },    /* first entry is default */
 	{ "><>",      NULL },    /* no layout function means floating behavior */
 	{ "[M]",      monocle },
 	{ "|M|",      centeredmaster },
diff --git a/dwm/dwm.1 b/dwm/dwm.1
index 0170fb8..5ea0df2 100644
--- a/dwm/dwm.1
+++ b/dwm/dwm.1
@@ -10,8 +10,8 @@ and floating layouts. Either layout can be applied dynamically, optimising the
 environment for the application in use and the task performed.
 .P
 In tiled layouts windows are managed in a master and stacking area. The master
-area on the left contains one window by default, and the stacking area on the
-right contains all other windows. The number of master area windows can be
+area on the right contains one window by default, and the stacking area on the
+left contains all other windows. The number of master area windows can be
 adjusted from zero to an arbitrary number. In monocle layout all windows are
 maximised to the screen size. In floating layout windows can be resized and
 moved freely. Dialog windows are always managed floating, regardless of the
diff --git a/dwm/dwm.c b/dwm/dwm.c
index ea2a826..4c3e56e 100644
--- a/dwm/dwm.c
+++ b/dwm/dwm.c
@@ -1794,12 +1794,12 @@ tile(Monitor *m)
 	for (i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
 		if (i < m->nmaster) {
 			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
-			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
+			resize(c, m->wx + m->ww - mw, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
 			if (my + HEIGHT(c) < m->wh)
 				my += HEIGHT(c);
 		} else {
 			h = (m->wh - ty) / (n - i);
-			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), 0);
+			resize(c, m->wx, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), 0);
 			if (ty + HEIGHT(c) < m->wh)
 				ty += HEIGHT(c);
 		}
-- 
2.30.0

